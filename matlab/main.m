% MAIN project main entry for testing functions
% data sets are hard coded for convenience
% Usage :
%     >>> main

function main()
    
    im1_fn = ['../data/milkbox_test_l.jpg'];
    im2_fn = ['../data/milkbox_test_r.jpg'];
    

    if 0
        im1 = imread('../data/test_r.jpg');im1 = rgb2gray(im1);
        im2 = imread('../data/test_l.jpg');im2 = rgb2gray(im2);
    else
        im1 = imread(im1_fn);im1 = rgb2gray(im1);
        im2 = imread(im2_fn);im2 = rgb2gray(im2);
    end

    [H, F, finalmatches, initmatches] = testhomog_vgg(im1, im2)
    im1 = imread(im1_fn);im1 = rgb2gray(im1);
    im2 = imread(im2_fn);im2 = rgb2gray(im2);

% $$$ F =  [ 4.2513858033999e-07 -4.0431226807414e-05   0.0077414843253791
% $$$          -1.1731941413018e-05   3.842141268251e-06    -0.11110986024141
% $$$          0.0012875135289505      0.1209783628583                    1 ];

% $$$     F =[
% $$$ 
% $$$         -0.0000    0.0000   -0.0008
% $$$         -0.0000   -0.0000    0.0076
% $$$         0.0007   -0.0074   -0.2552
% $$$ 
% $$$        ];
% $$$ 
% $$$     finalmatches = [
% $$$ 
% $$$         8   278     6   319
% $$$         21   317    49   353
% $$$         27   313    57   347
% $$$         33   221     7   257
% $$$         40   311    69   343
% $$$         41   328    84   358
% $$$         43   335    91   364
% $$$         223   154   224   176
% $$$         263   123   259   146
% $$$         264   247   294   258
% $$$         277   118   271   141
% $$$         285   116   280   140
% $$$         296   352   335   331
% $$$         301   349   339   328
% $$$         304   344   341   324
% $$$         306   368   342   343
% $$$         310   342   345   322
% $$$         312   352   346   329
% $$$         327   336   356   314
% $$$         327   346   356   322
% $$$         341    53   318    82
% $$$         363   342   377   315
% $$$                    ];

if 0
F =[

    0.0000   -0.0000    0.0033
    0.0000    0.0000   -0.0105
   -0.0047    0.0098    0.4989
];

finalmatches =[

     8   278     6   319
    21   317    49   353
    27   313    57   347
    40   311    69   343
    41   328    84   358
    43   335    91   364
    52   309    80   340
    63   219    15   256
    95   316   126   338
   103   317   136   337
   117   328   156   344
   132   186    61   213
   135   200    75   227
   296   352   335   331
   301   349   339   328
   304   344   341   324
   310   342   345   322
   312   352   346   329
   315   255   293   253
   327   336   356   314
   327   346   356   322
   418   252   361   235
   548   250   458   222
];
end

if 0

F =[

   -0.0000    0.0000   -0.0038
   -0.0000   -0.0000    0.0115
    0.0053   -0.0103   -0.5500
];

finalmatches =[

     8   278     6   319
    10   332    56   367
    18   329    63   363
    21   317    49   353
    27   313    57   347
    40   311    69   343
    41   328    84   358
    43   335    91   364
    52   309    80   340
    63   219    15   256
    95   316   126   338
   103   317   136   337
   117   328   156   344
   157   379   224   377
   259   208   234   210
   296   352   335   331
   301   349   339   328
   304   344   341   324
   310   342   345   322
   312   352   346   329
   327   336   356   314
   517    92   477     8
   573   251   571   201
];
end

if 0
    F = [

        -0.0000    0.0000   -0.0020
        -0.0000   -0.0000    0.0086
        0.0027   -0.0082   -0.3799
        ];


    F =[

        -0.0000   -0.0000    0.0007
        0.0000   -0.0000   -0.0057
        0.0005    0.0092   -0.3476
       ];                                      % happy result

    F = [

        -0.0000    0.0000   -0.0033
        -0.0000   -0.0000    0.0121
        0.0055   -0.0097   -0.7702
        ];

    F =[

        -0.0000    0.0000   -0.0008
        -0.0000   -0.0000    0.0076
        0.0007   -0.0074   -0.2552

       ];





% $$$ 
% $$$     H = [
% $$$ 
% $$$         -0.7239   -0.3077   88.4399
% $$$         -0.1248   -0.6451   33.0756
% $$$         -0.0007   -0.0006   -0.2889
% $$$         ];


    finalmatches = [

        8   278     6   319
        21   317    49   353
        27   313    57   347
        33   221     7   257
        40   311    69   343
        41   328    84   358
        43   335    91   364
        223   154   224   176
        263   123   259   146
        264   247   294   258
        277   118   271   141
        285   116   280   140
        296   352   335   331
        301   349   339   328
        304   344   341   324
        306   368   342   343
        310   342   345   322
        312   352   346   329
        327   336   356   314
        327   346   356   322
        341    53   318    82
        363   342   377   315
                   ];

    initmatches = [

        4   320     4   239
        8   278     6   319
        10   332    56   367
        12   317    43   367
        18   329    63   363
        21   317    49   353
        27   313    57   347
        32   326   125   333
        33   221     7   257
        40   311    69   343
        41   328    84   358
        43   335    91   364
        52   309    80   340
        63   219    15   256
        64   189    54   189
        65   210   134   231
        67   273   119   291
        75   336    43   378
        77   258    11   319
        83   189    94   240
        95   316   126   338
        103   317   136   337
        117   328   156   344
        125   233    78   243
        125   269    58   291
        132   186    61   213
        135   200    75   227
        136   231    84   224
        156   144    62   169
        157   379   224   377
        166   422   255   411
        175    48   255    28
        176   420   257   387
        184    16   230    92
        190    52   266    48
        194   190   114   208
        200    61   178   132
        219    56   251    20
        223   154   224   176
        224   170   289   219
        232   370   247   363
        236   133   280    78
        236   182   312   243
        239   199   227   139
        240   256   320   294
        248   210   241   215
        254   151   265   171
        259   208   234   210
        260   155   276   175
        260   274   279   238
        261   223   240   202
        263   123   259   146
        263   144   325   184
        263   228   234   254
        263   348   207   331
        264   247   294   258
        265   150   292   146
        266   239   299   241
        268   128   227   133
        270   198   319   210
        272   407   298   334
        274   412   288   349
        275   310   321   300
        276   135   275    94
        277   118   271   141
        282   173   319   188
        282   428   324   396
        285   116   280   140
        288   167   312   180
        292    86   273   113
        296   352   335   331
        300   304   350   232
        301   155   277   157
        301   349   339   328
        304   344   341   324
        306   142   328   160
        306   368   342   343
        308   134   284   155
        308   151   336   169
        309    43   296   116
        310   144   317   158
        310   342   345   322
        312   352   346   329
        315   255   293   253
        318   139   340   159
        318   182   343   192
        318   350   323   381
        321    46   303    78
        327   336   356   314
        327   346   356   322
        335   344   243   330
        337   183   357   192
        339   298   339   261
        341    53   318    82
        342   216   428   195
        357    58   365    92
        357   181   310   251
        358    53   315    49
        358   380   339   296
        361   121   376   141
        363   342   377   315
        366   337   273   347
        368   179   427   158
        375   123   393   130
        375   258   366   217
        376   114   346    73
        378    81   363    71
        382    28   294     7
        385   221   350   256
        386    22   319    67
        393    22   323    34
        396    39   386   133
        409   327   386   306
        414    68   417    22
        418    54   351    74
        418   146   371    87
        418   252   361   235
        422    51   335    25
        426   111   400   175
        429   326   364   321
        431   314   367   349
        437   313   379   304
        437   320   379   243
        443   310   384   339
        443   321   426   237
        445   388   424   341
        450   174   425   174
        458   177   433   177
        462   199   434   222
        462   215   432   269
        463   142   390   210
        463   178   435   159
        466   108   486   141
        469     8   413    10
        480   256   424   280
        481   241   424   288
        515    62   604    26
        517    92   477     8
        528   213   562   268
        548   250   458   222
        553   170   549   268
        573   251   571   201
        598   414   537   336
                  ];
end

    [H1, H2, F12, im1_rect, im2_rect] = rectify(im1, im2, finalmatches, F);
% $$$     [H1, H2, F12] = rectify(im1, im2, initmatches, F);

    [im1_crop, im2_crop] = crop_rectified(im1_rect, im2_rect);

    show(im1_crop, 5);
    show(im2_crop, 6);
    % Valid values include: 'SAD', 'LSAD', 'ZSAD', 'SSD', 'LSSD',
    % ZSSD', 'NCC',
% $$$     [dispMap, timeTaken] = denseMatch(im1_crop, ...
% $$$                                       im2_crop,9, 0, 16, 'SAD');

    dispMap = stereomatch(im1_crop, im2_crop, 9, 16, 0);
% $$$     [dispMap, timeTaken]=funcSADL2R(im2_crop, im2_crop, 9, 0, 16);
% $$$     dispMap = stereomatch(im1, im2, 9, 16, 0);
    show(dispMap, 7);

    % output section
    H1
    H2
    F12
% $$$ dispMap = stereomatch(im1_rect, im2_rect, 9, 16, 0);imshow(dispMap, []);


% -----------------------------------------------------------------------------

function [im1_crop, im2_crop] = crop_rectified(im1_rect, im2_rect)
    [im1_h, im1_w] = size(im1_rect);
    [im2_h, im2_w] = size(im2_rect);
    minw = min(size(im1_rect, 2), size(im2_rect, 2))-8;
    minh = min(size(im1_rect, 1), size(im2_rect, 1))-8;
    % [xmin ymin width height]
    im1_crop = imcrop(im1_rect, ...
                      [(im1_w-minw)/2 (im1_h-minh)/2 minw minh]);
    im2_crop = imcrop(im2_rect, ...
                      [(im2_w-minw)/2 (im2_h-minh)/2 minw minh]);
    i1size = size(im1_crop);
    i2size = size(im2_crop);
    if (i1size(1) ~= i2size(1) || i1size(2) ~= i2size(2))
        error(['crop result in wrong sized images']);
    end
    
